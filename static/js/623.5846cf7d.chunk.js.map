{"version":3,"file":"static/js/623.5846cf7d.chunk.js","mappings":"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","sources":["redux/contacts/selectorsContacts.js","components/contacts/ContactList.styled.js","components/contacts/ContactList.js","components/filter/Filter.styled.js","components/filter/Filter.js","components/form/ContactForm.styled.js","components/form/ContactForm.js","pages/ContactsPage/Contacts.styled.js","pages/ContactsPage/Contacts.js"],"sourcesContent":["\nexport const selectContacts = state => state.contacts.items; // Selector para obtener el array de contactos del estado\nexport const selectIsLoading = state => state.contacts.isLoading; // Selector para obtener el estado de carga del estado\nexport const selectError = state => state.contacts.error; // Selector para obtener el valor de error del estado\nexport const selectContactsFilter = state => state.filters.filter; // Selector para obtener el valor del filtro del estado\n\n","import styled from 'styled-components';\n\n\nexport const ContactLi = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n  align-items: center;\n`;\n\n\nexport const ContactText = styled.p`\n  font-size: 18px;\n  ::first-letter {\n    color: ${p => p.rgb};\n  }\n  span {\n  margin-left: 10px;\n  }\n`;\n\nexport const ContactDelete = styled.button`\n  margin-left: auto;\n  border: none;\n  border-radius: 5px;\n  height: 30px;\n  border: none;\n  font-size: 18px;\n  font-weight: bold;\n  color: red;\n\n\n  &:hover,\n  &:focus {\n    color: rgb(255, 255, 255);\n    background-color: red;\n    cursor: pointer;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux'; // Importa los hooks useSelector y useDispatch de 'react-redux'\nimport { deleteContactsThunk } from 'redux/contacts/operationsContacts'; // Importa la operación deleteContactsThunk desde 'redux/contacts/operationsContacts'\nimport { selectContacts, selectContactsFilter } from '../../redux/contacts/selectorsContacts'; // Importa los selectores selectContacts y selectContactsFilter desde '../../redux/contacts/selectorsContacts'\nimport { ContactLi, ContactText, ContactDelete } from './ContactList.styled'; // Importa los componentes ContactsList, ContactItem, ContactIcon, ContactText y ContactDelete desde './ContactList.styles';\n\nexport function ContactList() {\n  const contacts = useSelector(selectContacts); // Obtiene los contactos del estado utilizando el selector selectContacts\n  const filterValue = useSelector(selectContactsFilter).toLowerCase(); // Obtiene el valor del filtro del estado utilizando el selector selectContactsFilter y lo convierte a minúsculas\n  const dispatch = useDispatch(); // Obtiene la función de despacho de acciones useDispatch\n\n  const handleDelete = evt => {\n    dispatch(deleteContactsThunk(evt.currentTarget.id)); // Despacha la acción deleteContactsThunk pasando el ID del contacto como argumento\n  };\n\n  const getVisibilityContacts = () => {\n    if (!filterValue || filterValue === '') {\n      return contacts; // Retorna todos los contactos si no hay un filtro aplicado\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    ); // Retorna los contactos cuyo nombre coincide con el filtro aplicado (ignorando mayúsculas y minúsculas)\n  };\n\n  const visibilityContacts = getVisibilityContacts(); // Obtiene los contactos visibles según el filtro\n\n  return (\n    <ul>\n      {visibilityContacts.map(contact => (\n        <ContactLi key={contact.id}>\n          <ContactText>\n            {contact.name} <span>{contact.number}</span> {/* Nombre y número del contacto */}\n          </ContactText>\n          <ContactDelete type=\"button\" id={contact.id} onClick={handleDelete}> X </ContactDelete>\n        </ContactLi>\n      ))}\n    </ul>\n  );\n}\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  padding: 10px;\n  font-size: 23px;\n  color: blue;\n\n  input {\n    width: 290px;\n    border-radius: 5px;\n    font-size: 1rem;\n    padding: 0.5rem;\n  }\n`;\n","import { useDispatch } from 'react-redux'; // Importa el hook useDispatch de react-redux\nimport { FilterLabel } from './Filter.styled'; // Importa el componente FilterLabel desde el archivo Filter.styled.js\nimport { setFilterContacts } from '../../redux/contacts/filterSlice'; // Importa la acción setFilterContacts desde el slice de filtro de contactos\n\nexport function Filter() {\n  const dispatch = useDispatch(); // Inicializa la función dispatch utilizando el hook useDispatch\n\n  const handlerFilter = evt => {\n    dispatch(setFilterContacts(evt.target.value)); // Despacha la acción setFilterContacts con el nuevo valor del campo de texto como argumento\n  };\n\n  return (\n    <FilterLabel>\n      Find contact by the name\n      <input type=\"text\" name=\"filter\" onChange={handlerFilter} placeholder='🔎 Search' /> {/* Campo de texto para filtrar por nombre */}\n    </FilterLabel>\n  );\n}\n\n\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  font-size: 22px;\n  padding-top: 20px;\n  padding-bottom: 5px;\n`;\n\nexport const Name = styled.p`\n  font-size: 20px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  border-radius: 5px;\n  font-size: 1rem;\n  padding: 0.9rem;\n  margin-bottom: 10px;\n`;\n\nexport const AddButton = styled.button`\n  font-size: 1.2rem;\n  padding: 0.4rem 0.8rem;\n  background-color: blue;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  margin: 0 auto;\n  display: block;\n`;\n\n","import { useDispatch, useSelector } from 'react-redux'; // Importación de Redux\nimport { addContactsThunk } from '../../redux/contacts/operationsContacts'; // Importación de una operación de Redux\nimport { toast } from 'react-toastify'; // Importación de la biblioteca react-toastify\nimport { selectContacts } from '../../redux/contacts/selectorsContacts'; // Importación de un selector de Redux\nimport { FormContainer, Name, Input, AddButton } from './ContactForm.styled'; // Importación de componentes estilizados\n\nconst ContactForm = () => {\n  const dispatch = useDispatch(); // Obtiene la función 'dispatch' de Redux\n  const contacts = useSelector(selectContacts); // Obtiene el estado de los contactos del store de Redux\n\n  function handlerSubmit(evt) {\n    evt.preventDefault(); // Previene el comportamiento predeterminado del formulario\n    const form = evt.target; // Obtiene el formulario actual\n    const name = form.name.value; // Obtiene el valor del campo 'name' del formulario\n    const number = form.number.value; // Obtiene el valor del campo 'number' del formulario\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return toast.warn(`${name} is already in contacts.`); // Muestra una notificación si el contacto ya existe\n    }\n\n    dispatch(addContactsThunk({ name, number })); // Llama a la operación 'addContactsThunk' para agregar un nuevo contacto\n\n    form.reset(); // Restablece el formulario a su estado inicial\n  }\n\n  return (\n    <FormContainer>\n      <form onSubmit={handlerSubmit}>\n        <ul>\n          <li>\n            <Name>Name</Name>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              placeholder=' Santiago Bogan'\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </li>\n          <li>\n            <Name>Contact</Name>\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              placeholder='668-471-1380'\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </li>\n        </ul>\n\n        <AddButton type=\"submit\">\n         + Add contact\n        </AddButton>\n      </form>\n    </FormContainer>\n  );\n};\n\nexport default ContactForm; // Exporta el componente ContactForm\n\n\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  padding-top: 30px;\n  text-align: center;\n  font-size: 40px;\n  color: black;\n  font-weight: bold;\n`;\n\nexport const TitleFilter = styled.h2`\n  padding-top: 40px;\n  padding-bottom: 20px;\n  text-align: center;\n  font-size: 40px;\n  color: black;\n  font-weight: bold;\n`;\n\n","import { useSelector, useDispatch } from 'react-redux'; // Importa los hooks useSelector y useDispatch de 'react-redux'\nimport { useEffect } from 'react'; // Importa el hook useEffect de 'react'\nimport { getContactsThunk } from '../../redux/contacts/operationsContacts'; // Importa la operación getContactsThunk desde '../../redux/contacts/operationsContacts'\nimport { ContactList } from 'components/contacts/ContactList'; // Importa el componente ContactList desde 'components/contacts/ContactList'\nimport { Filter } from 'components/filter/Filter'; // Importa el componente Filter desde 'components/filter/Filter'\nimport ContactForm from 'components/form/ContactForm'; // Importa el componente ContactForm desde 'components/form/ContactForm'\nimport { selectIsLoading, selectError } from '../../redux/contacts/selectorsContacts'; // Importa los selectores selectIsLoading y selectError desde '../../redux/contacts/selectorsContacts'\nimport { Title } from './Contacts.styled'; // Importa el componente Title desde './Contacts.styled'\n\nconst Contacts = () => {\n  const dispatch = useDispatch(); // Obtiene la función de despacho de acciones useDispatch\n  const isLoading = useSelector(selectIsLoading); // Obtiene el valor de isLoading del estado utilizando el selector selectIsLoading\n  const error = useSelector(selectError); // Obtiene el valor de error del estado utilizando el selector selectError\n\n  useEffect(() => {\n    dispatch(getContactsThunk()); // Despacha la acción getContactsThunk para obtener los contactos al montar el componente\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      <Title>Phonebook 📲</Title> {/* Título de la lista de contactos */}\n      <ContactForm /> {/* Renderiza el componente ContactForm para agregar nuevos contactos */}\n      <Filter /> {/* Renderiza el componente Filter para filtrar los contactos */}\n      <ContactList /> {/* Renderiza el componente ContactList para mostrar la lista de contactos */}\n    </div>\n  );\n};\n\nexport default Contacts; // Exporta el componente Contacts como componente por defecto\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters","filter","ContactLi","styled","_templateObject","_taggedTemplateLiteral","ContactText","_templateObject2","p","rgb","ContactDelete","_templateObject3","ContactList","useSelector","filterValue","toLowerCase","dispatch","useDispatch","handleDelete","evt","deleteContactsThunk","currentTarget","id","visibilityContacts","contact","name","includes","_jsx","children","map","_jsxs","number","type","onClick","FilterLabel","Filter","onChange","setFilterContacts","target","value","placeholder","FormContainer","Name","Input","AddButton","_templateObject4","onSubmit","preventDefault","form","find","toast","concat","addContactsThunk","reset","pattern","title","required","Title","useEffect","getContactsThunk","ContactForm"],"sourceRoot":""}